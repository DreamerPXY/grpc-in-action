// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: blendservice.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BlendServiceClient is the client API for BlendService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlendServiceClient interface {
	Blend(ctx context.Context, in *BlendReq, opts ...grpc.CallOption) (*BlendRes, error)
}

type blendServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBlendServiceClient(cc grpc.ClientConnInterface) BlendServiceClient {
	return &blendServiceClient{cc}
}

func (c *blendServiceClient) Blend(ctx context.Context, in *BlendReq, opts ...grpc.CallOption) (*BlendRes, error) {
	out := new(BlendRes)
	err := c.cc.Invoke(ctx, "/payservice.BlendService/blend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlendServiceServer is the server API for BlendService service.
// All implementations must embed UnimplementedBlendServiceServer
// for forward compatibility
type BlendServiceServer interface {
	Blend(context.Context, *BlendReq) (*BlendRes, error)
	mustEmbedUnimplementedBlendServiceServer()
}

// UnimplementedBlendServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBlendServiceServer struct {
}

func (UnimplementedBlendServiceServer) Blend(context.Context, *BlendReq) (*BlendRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Blend not implemented")
}
func (UnimplementedBlendServiceServer) mustEmbedUnimplementedBlendServiceServer() {}

// UnsafeBlendServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlendServiceServer will
// result in compilation errors.
type UnsafeBlendServiceServer interface {
	mustEmbedUnimplementedBlendServiceServer()
}

func RegisterBlendServiceServer(s grpc.ServiceRegistrar, srv BlendServiceServer) {
	s.RegisterService(&BlendService_ServiceDesc, srv)
}

func _BlendService_Blend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlendServiceServer).Blend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payservice.BlendService/blend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlendServiceServer).Blend(ctx, req.(*BlendReq))
	}
	return interceptor(ctx, in, info, handler)
}

// BlendService_ServiceDesc is the grpc.ServiceDesc for BlendService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlendService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "payservice.BlendService",
	HandlerType: (*BlendServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "blend",
			Handler:    _BlendService_Blend_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blendservice.proto",
}

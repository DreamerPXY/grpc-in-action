/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.example.userinfoservice;

import com.example.userinfoservice.impl.UserInfoServiceImpl;
import io.grpc.Server;
import io.grpc.ServerBuilder;
import io.grpc.protobuf.services.ProtoReflectionService;

import java.io.IOException;
import java.util.logging.Logger;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    private static final Logger logger = Logger.getLogger(App.class.getName());

    private Server server;

    private void start() throws IOException {
        int port = 10081;
        server = ServerBuilder.forPort(port)
                .addService(new UserInfoServiceImpl())
                // 添加反射服务
               .addService(ProtoReflectionService.newInstance())
                .build()
                .start();
        logger.info("Server started, listening on " + port);
        Runtime.getRuntime().addShutdownHook(new Thread(() -> {
            // Use stderr here since the logger may have been reset by its JVM shutdown hook.
            logger.info("*** shutting down gRPC server since JVM is shutting down");
            App.this.stop();
            logger.info("*** server shut down");
        }));
    }

    private void stop() {
        if (server != null) {
            server.shutdown();
        }
    }

    /**
     * Await termination on the main thread since the grpc library uses daemon threads.
     */
    private void blockUntilShutdown() throws InterruptedException {
        if (server != null) {
            server.awaitTermination();
        }
    }

    /**
     * Main launches the server from the command line.
     */
    public static void main(String[] args) throws IOException, InterruptedException {
        final App server = new App();
        server.start();
        server.blockUntilShutdown();
    }
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: proto/userinfo.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserInfoServiceClient is the client API for UserInfoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserInfoServiceClient interface {
	GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoRes, error)
	ReportUserBehavior(ctx context.Context, opts ...grpc.CallOption) (UserInfoService_ReportUserBehaviorClient, error)
	SupplyUserChangeInfo(ctx context.Context, in *SupplyUserChangeInfoReq, opts ...grpc.CallOption) (UserInfoService_SupplyUserChangeInfoClient, error)
	ExchangeUserInfo(ctx context.Context, opts ...grpc.CallOption) (UserInfoService_ExchangeUserInfoClient, error)
}

type userInfoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserInfoServiceClient(cc grpc.ClientConnInterface) UserInfoServiceClient {
	return &userInfoServiceClient{cc}
}

func (c *userInfoServiceClient) GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoRes, error) {
	out := new(GetUserInfoRes)
	err := c.cc.Invoke(ctx, "/userinfoservice.UserInfoService/getUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInfoServiceClient) ReportUserBehavior(ctx context.Context, opts ...grpc.CallOption) (UserInfoService_ReportUserBehaviorClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserInfoService_ServiceDesc.Streams[0], "/userinfoservice.UserInfoService/reportUserBehavior", opts...)
	if err != nil {
		return nil, err
	}
	x := &userInfoServiceReportUserBehaviorClient{stream}
	return x, nil
}

type UserInfoService_ReportUserBehaviorClient interface {
	Send(*ReportUserBehaviorReq) error
	CloseAndRecv() (*ReportUserBehaviorRes, error)
	grpc.ClientStream
}

type userInfoServiceReportUserBehaviorClient struct {
	grpc.ClientStream
}

func (x *userInfoServiceReportUserBehaviorClient) Send(m *ReportUserBehaviorReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userInfoServiceReportUserBehaviorClient) CloseAndRecv() (*ReportUserBehaviorRes, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ReportUserBehaviorRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userInfoServiceClient) SupplyUserChangeInfo(ctx context.Context, in *SupplyUserChangeInfoReq, opts ...grpc.CallOption) (UserInfoService_SupplyUserChangeInfoClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserInfoService_ServiceDesc.Streams[1], "/userinfoservice.UserInfoService/supplyUserChangeInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &userInfoServiceSupplyUserChangeInfoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UserInfoService_SupplyUserChangeInfoClient interface {
	Recv() (*SupplyUserChangeInfoRes, error)
	grpc.ClientStream
}

type userInfoServiceSupplyUserChangeInfoClient struct {
	grpc.ClientStream
}

func (x *userInfoServiceSupplyUserChangeInfoClient) Recv() (*SupplyUserChangeInfoRes, error) {
	m := new(SupplyUserChangeInfoRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userInfoServiceClient) ExchangeUserInfo(ctx context.Context, opts ...grpc.CallOption) (UserInfoService_ExchangeUserInfoClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserInfoService_ServiceDesc.Streams[2], "/userinfoservice.UserInfoService/exchangeUserInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &userInfoServiceExchangeUserInfoClient{stream}
	return x, nil
}

type UserInfoService_ExchangeUserInfoClient interface {
	Send(*ExchangeUserInfoReq) error
	Recv() (*ExchangeUserInfoRes, error)
	grpc.ClientStream
}

type userInfoServiceExchangeUserInfoClient struct {
	grpc.ClientStream
}

func (x *userInfoServiceExchangeUserInfoClient) Send(m *ExchangeUserInfoReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userInfoServiceExchangeUserInfoClient) Recv() (*ExchangeUserInfoRes, error) {
	m := new(ExchangeUserInfoRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UserInfoServiceServer is the server API for UserInfoService service.
// All implementations must embed UnimplementedUserInfoServiceServer
// for forward compatibility
type UserInfoServiceServer interface {
	GetUserInfo(context.Context, *GetUserInfoReq) (*GetUserInfoRes, error)
	ReportUserBehavior(UserInfoService_ReportUserBehaviorServer) error
	SupplyUserChangeInfo(*SupplyUserChangeInfoReq, UserInfoService_SupplyUserChangeInfoServer) error
	ExchangeUserInfo(UserInfoService_ExchangeUserInfoServer) error
	mustEmbedUnimplementedUserInfoServiceServer()
}

// UnimplementedUserInfoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserInfoServiceServer struct {
}

func (UnimplementedUserInfoServiceServer) GetUserInfo(context.Context, *GetUserInfoReq) (*GetUserInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedUserInfoServiceServer) ReportUserBehavior(UserInfoService_ReportUserBehaviorServer) error {
	return status.Errorf(codes.Unimplemented, "method ReportUserBehavior not implemented")
}
func (UnimplementedUserInfoServiceServer) SupplyUserChangeInfo(*SupplyUserChangeInfoReq, UserInfoService_SupplyUserChangeInfoServer) error {
	return status.Errorf(codes.Unimplemented, "method SupplyUserChangeInfo not implemented")
}
func (UnimplementedUserInfoServiceServer) ExchangeUserInfo(UserInfoService_ExchangeUserInfoServer) error {
	return status.Errorf(codes.Unimplemented, "method ExchangeUserInfo not implemented")
}
func (UnimplementedUserInfoServiceServer) mustEmbedUnimplementedUserInfoServiceServer() {}

// UnsafeUserInfoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserInfoServiceServer will
// result in compilation errors.
type UnsafeUserInfoServiceServer interface {
	mustEmbedUnimplementedUserInfoServiceServer()
}

func RegisterUserInfoServiceServer(s grpc.ServiceRegistrar, srv UserInfoServiceServer) {
	s.RegisterService(&UserInfoService_ServiceDesc, srv)
}

func _UserInfoService_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInfoServiceServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userinfoservice.UserInfoService/getUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInfoServiceServer).GetUserInfo(ctx, req.(*GetUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInfoService_ReportUserBehavior_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserInfoServiceServer).ReportUserBehavior(&userInfoServiceReportUserBehaviorServer{stream})
}

type UserInfoService_ReportUserBehaviorServer interface {
	SendAndClose(*ReportUserBehaviorRes) error
	Recv() (*ReportUserBehaviorReq, error)
	grpc.ServerStream
}

type userInfoServiceReportUserBehaviorServer struct {
	grpc.ServerStream
}

func (x *userInfoServiceReportUserBehaviorServer) SendAndClose(m *ReportUserBehaviorRes) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userInfoServiceReportUserBehaviorServer) Recv() (*ReportUserBehaviorReq, error) {
	m := new(ReportUserBehaviorReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _UserInfoService_SupplyUserChangeInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SupplyUserChangeInfoReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserInfoServiceServer).SupplyUserChangeInfo(m, &userInfoServiceSupplyUserChangeInfoServer{stream})
}

type UserInfoService_SupplyUserChangeInfoServer interface {
	Send(*SupplyUserChangeInfoRes) error
	grpc.ServerStream
}

type userInfoServiceSupplyUserChangeInfoServer struct {
	grpc.ServerStream
}

func (x *userInfoServiceSupplyUserChangeInfoServer) Send(m *SupplyUserChangeInfoRes) error {
	return x.ServerStream.SendMsg(m)
}

func _UserInfoService_ExchangeUserInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserInfoServiceServer).ExchangeUserInfo(&userInfoServiceExchangeUserInfoServer{stream})
}

type UserInfoService_ExchangeUserInfoServer interface {
	Send(*ExchangeUserInfoRes) error
	Recv() (*ExchangeUserInfoReq, error)
	grpc.ServerStream
}

type userInfoServiceExchangeUserInfoServer struct {
	grpc.ServerStream
}

func (x *userInfoServiceExchangeUserInfoServer) Send(m *ExchangeUserInfoRes) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userInfoServiceExchangeUserInfoServer) Recv() (*ExchangeUserInfoReq, error) {
	m := new(ExchangeUserInfoReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UserInfoService_ServiceDesc is the grpc.ServiceDesc for UserInfoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserInfoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "userinfoservice.UserInfoService",
	HandlerType: (*UserInfoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getUserInfo",
			Handler:    _UserInfoService_GetUserInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "reportUserBehavior",
			Handler:       _UserInfoService_ReportUserBehavior_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "supplyUserChangeInfo",
			Handler:       _UserInfoService_SupplyUserChangeInfo_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "exchangeUserInfo",
			Handler:       _UserInfoService_ExchangeUserInfo_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/userinfo.proto",
}
